/**
 * –î–£–ë–õ–ò–ö–ê–¢ –ô–é–ù–ê–õ–ò–®–õ–ê–†–ù–ò –é–ß–ò–†–ò–®
 * Koson va Nishon —É—á—É–Ω 2 –º–∞—Ä—Ç–∞ —è—Ä–∞—Ç–∏–ª–≥–∞–Ω –π—û–Ω–∞–ª–∏—à–ª–∞—Ä–Ω–∏ —Ç–æ–∑–∞–ª–∞—à
 */

const { query } = require('./src/database/sqlite');

async function removeDuplicateRoutes() {
  try {
    console.log('\nüîç –î–£–ë–õ–ò–ö–ê–¢ –ô–é–ù–ê–õ–ò–®–õ–ê–†–ù–ò –¢–û–ü–ò–®...\n');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    // –ë–∞—Ä—á–∞ –π—û–Ω–∞–ª–∏—à–ª–∞—Ä–Ω–∏ –æ–ª–∏—à
    const routes = await query(`
      SELECT id, name, from_keywords, to_keywords, active
      FROM routes
      WHERE name LIKE '%Koson%' OR name LIKE '%Nishon%'
      ORDER BY id
    `);

    console.log(`üìä –¢–æ–ø–∏–ª–¥–∏: ${routes.length} —Ç–∞ Koson/Nishon –π—û–Ω–∞–ª–∏—à–∏\n`);

    // –î—É–±–ª–∏–∫–∞—Ç–ª–∞—Ä–Ω–∏ –≥—É—Ä—É“≥–ª–∞—à
    const grouped = {};

    routes.forEach(r => {
      const name = r.name || r.NAME;
      const key = name.toLowerCase().trim();

      if (!grouped[key]) {
        grouped[key] = [];
      }
      grouped[key].push({
        id: r.id || r.ID,
        name: name,
        from: r.from_keywords || r.FROM_KEYWORDS,
        to: r.to_keywords || r.TO_KEYWORDS
      });
    });

    // –î—É–±–ª–∏–∫–∞—Ç–ª–∞—Ä–Ω–∏ –∞–Ω–∏“õ–ª–∞—à
    const duplicates = [];
    for (const [key, items] of Object.entries(grouped)) {
      if (items.length > 1) {
        console.log(`‚ùå –î–£–ë–õ–ò–ö–ê–¢ –¢–û–ü–ò–õ–î–ò: "${items[0].name}"`);
        items.forEach((item, i) => {
          console.log(`   ${i + 1}. ID ${item.id}`);
        });

        // –ë–∏—Ä–∏–Ω—á–∏–¥–∞–Ω —Ç–∞—à“õ–∞—Ä–∏ “≥–∞–º–º–∞—Å–∏–Ω–∏ –¥—É–±–ª–∏–∫–∞—Ç –¥–µ–± –±–µ–ª–≥–∏–ª–∞—à
        for (let i = 1; i < items.length; i++) {
          duplicates.push(items[i].id);
        }
        console.log('');
      }
    }

    if (duplicates.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç –π—û–Ω–∞–ª–∏—à–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏!\n');
      process.exit(0);
    }

    console.log(`\nüìã –é—á–∏—Ä–∏–ª–∏—à–∏ –∫–µ—Ä–∞–∫: ${duplicates.length} —Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç\n`);
    console.log('ID —Ä—û–π—Ö–∞—Ç–∏:', duplicates.join(', '), '\n');

    // “≤–∞—Ä –±–∏—Ä –¥—É–±–ª–∏–∫–∞—Ç–Ω–∏ —û—á–∏—Ä–∏—à
    for (const id of duplicates) {
      // –ê–≤–≤–∞–ª —ç—ä–ª–æ–Ω–ª–∞—Ä–Ω–∏ –∫—û—á–∏—Ä–∏—à (agar –±–æ—Ä –±—û–ª—Å–∞)
      const messages = await query('SELECT * FROM route_messages WHERE route_id = ?', [id]);

      if (messages.length > 0) {
        console.log(`‚ö†Ô∏è  ID ${id}: ${messages.length} —Ç–∞ —ç—ä–ª–æ–Ω —Ç–æ–ø–∏–ª–¥–∏`);

        // –≠—Å–∫–∏ –π—û–Ω–∞–ª–∏—à–≥–∞ –∫—û—á–∏—Ä–∏—à –∫–µ—Ä–∞–∫
        const route = routes.find(r => (r.id || r.ID) === id);
        const routeName = route.name || route.NAME;
        const originalRoute = grouped[routeName.toLowerCase().trim()][0];

        console.log(`   –≠—ä–ª–æ–Ω–ª–∞—Ä–Ω–∏ ID ${originalRoute.id} –≥–∞ –∫—û—á–∏—Ä–∏—à...`);

        // –≠—ä–ª–æ–Ω–ª–∞—Ä–Ω–∏ route_id –Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à
        try {
          await query(
            'UPDATE route_messages SET route_id = ? WHERE route_id = ?',
            [originalRoute.id, id]
          );
          console.log(`   ‚úÖ ${messages.length} —Ç–∞ —ç—ä–ª–æ–Ω –∫—û—á–∏—Ä–∏–ª–¥–∏\n`);
        } catch (err) {
          console.log(`   ‚ö†Ô∏è  –ë–∞—ä–∑–∏ —ç—ä–ª–æ–Ω–ª–∞—Ä –¥—É–±–ª–∏–∫–∞—Ç, —û—á–∏—Ä–∏–ª–∞–¥–∏\n`);
        }
      }

      // –ô—û–Ω–∞–ª–∏—à–Ω–∏ —û—á–∏—Ä–∏—à
      await query('DELETE FROM routes WHERE id = ?', [id]);
      console.log(`‚úÖ ID ${id} —û—á–∏—Ä–∏–ª–¥–∏`);
    }

    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    console.log(`‚úÖ ${duplicates.length} —Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç –π—û–Ω–∞–ª–∏—à —û—á–∏—Ä–∏–ª–¥–∏!\n`);

    // “ö–æ–ª–≥–∞–Ω –π—û–Ω–∞–ª–∏—à–ª–∞—Ä–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
    console.log('üìä “ö–û–õ–ì–ê–ù –ô–é–ù–ê–õ–ò–®–õ–ê–†:\n');
    const remaining = await query(`
      SELECT id, name,
        (SELECT COUNT(*) FROM route_messages WHERE route_id = routes.id) as msg_count
      FROM routes
      WHERE name LIKE '%Koson%' OR name LIKE '%Nishon%'
      ORDER BY id
    `);

    remaining.forEach(r => {
      const name = r.name || r.NAME;
      const id = r.id || r.ID;
      const count = r.msg_count || r.MSG_COUNT || 0;
      console.log(`  ‚úÖ ID ${id}: ${name} (${count} —Ç–∞ —ç—ä–ª–æ–Ω)`);
    });

    console.log('\n‚úÖ –¢–æ–∑–∞–ª–∞—à —Ç—É–≥–∞–¥–∏!\n');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –•–∞—Ç–æ:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

removeDuplicateRoutes();
