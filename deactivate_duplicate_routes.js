/**
 * –î–£–ë–õ–ò–ö–ê–¢ –ô–é–ù–ê–õ–ò–®–õ–ê–†–ù–ò –î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø “ö–ò–õ–ò–®
 * –é—á–∏—Ä–∏—à —û—Ä–Ω–∏–≥–∞ active=0 “õ–∏–ª–∏—à (—ç—ä–ª–æ–Ω–ª–∞—Ä —Å–∞“õ–ª–∞–Ω–∞–¥–∏)
 */

const { query } = require('./src/database/sqlite');

async function deactivateDuplicateRoutes() {
  try {
    console.log('\nüîç –î–£–ë–õ–ò–ö–ê–¢ –ô–é–ù–ê–õ–ò–®–õ–ê–†–ù–ò –¢–û–ü–ò–®...\n');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    // –ë–∞—Ä—á–∞ –π—û–Ω–∞–ª–∏—à–ª–∞—Ä–Ω–∏ –æ–ª–∏—à
    const routes = await query(`
      SELECT id, name, active
      FROM routes
      WHERE (name LIKE '%Koson%' OR name LIKE '%Nishon%')
      ORDER BY id
    `);

    console.log(`üìä –¢–æ–ø–∏–ª–¥–∏: ${routes.length} —Ç–∞ Koson/Nishon –π—û–Ω–∞–ª–∏—à–∏\n`);

    // –î—É–±–ª–∏–∫–∞—Ç–ª–∞—Ä–Ω–∏ –≥—É—Ä—É“≥–ª–∞—à
    const grouped = {};

    routes.forEach(r => {
      const name = (r.name || r.NAME).toLowerCase().trim();
      const id = r.id || r.ID;
      const active = r.active || r.ACTIVE;

      if (!grouped[name]) {
        grouped[name] = [];
      }
      grouped[name].push({ id, name: r.name || r.NAME, active });
    });

    // –î—É–±–ª–∏–∫–∞—Ç–ª–∞—Ä–Ω–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è “õ–∏–ª–∏—à
    const toDeactivate = [];

    for (const [key, items] of Object.entries(grouped)) {
      if (items.length > 1) {
        console.log(`‚ùå –î–£–ë–õ–ò–ö–ê–¢: "${items[0].name}"`);
        items.forEach((item, i) => {
          const status = item.active ? '‚úÖ ACTIVE' : '‚ùå Inactive';
          console.log(`   ${i + 1}. ID ${item.id} - ${status}`);
        });

        // –ë–∏—Ä–∏–Ω—á–∏—Å–∏–Ω–∏ —Å–∞“õ–ª–∞—à, “õ–æ–ª–≥–∞–Ω–ª–∞—Ä–∏–Ω–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
        for (let i = 1; i < items.length; i++) {
          toDeactivate.push(items[i].id);
          console.log(`   ‚Üí ID ${items[i].id} –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è “õ–∏–ª–∏–Ω–∞–¥–∏`);
        }
        console.log('');
      }
    }

    if (toDeactivate.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç –π—û–Ω–∞–ª–∏—à–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏!\n');
      process.exit(0);
    }

    console.log(`\nüìã –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è: ${toDeactivate.length} —Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç\n`);
    console.log('ID —Ä—û–π—Ö–∞—Ç–∏:', toDeactivate.join(', '), '\n');

    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è “õ–∏–ª–∏—à
    for (const id of toDeactivate) {
      await query('UPDATE routes SET active = 0 WHERE id = ?', [id]);

      // –≠—ä–ª–æ–Ω–ª–∞—Ä —Å–æ–Ω–∏
      const msgCount = await query('SELECT COUNT(*) as cnt FROM route_messages WHERE route_id = ?', [id]);
      const count = msgCount[0].cnt || msgCount[0].CNT || 0;

      console.log(`‚úÖ ID ${id} –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è “õ–∏–ª–∏–Ω–¥–∏ (${count} —Ç–∞ —ç—ä–ª–æ–Ω —Å–∞“õ–ª–∞–Ω–¥–∏)`);
    }

    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    console.log(`‚úÖ ${toDeactivate.length} —Ç–∞ –¥—É–±–ª–∏–∫–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è “õ–∏–ª–∏–Ω–¥–∏!\n`);

    // –§–∞–æ–ª –π—û–Ω–∞–ª–∏—à–ª–∞—Ä–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à
    console.log('üìä –§–ê–û–õ –ô–é–ù–ê–õ–ò–®–õ–ê–† (Koson/Nishon):\n');
    const active = await query(`
      SELECT id, name,
        (SELECT COUNT(*) FROM route_messages WHERE route_id = routes.id) as msg_count
      FROM routes
      WHERE (name LIKE '%Koson%' OR name LIKE '%Nishon%') AND active = 1
      ORDER BY id
    `);

    active.forEach(r => {
      const name = r.name || r.NAME;
      const id = r.id || r.ID;
      const count = r.msg_count || r.MSG_COUNT || 0;
      console.log(`  ‚úÖ ID ${id}: ${name} (${count} —Ç–∞ —ç—ä–ª–æ–Ω)`);
    });

    console.log('\nüìä –î–ï–ê–ö–¢–ò–í –ô–é–ù–ê–õ–ò–®–õ–ê–†:\n');
    const inactive = await query(`
      SELECT id, name,
        (SELECT COUNT(*) FROM route_messages WHERE route_id = routes.id) as msg_count
      FROM routes
      WHERE (name LIKE '%Koson%' OR name LIKE '%Nishon%') AND active = 0
      ORDER BY id
    `);

    inactive.forEach(r => {
      const name = r.name || r.NAME;
      const id = r.id || r.ID;
      const count = r.msg_count || r.MSG_COUNT || 0;
      console.log(`  ‚ùå ID ${id}: ${name} (${count} —Ç–∞ —ç—ä–ª–æ–Ω —Å–∞“õ–ª–∞–Ω–≥–∞–Ω)`);
    });

    console.log('\n‚úÖ –¢–æ–∑–∞–ª–∞—à —Ç—É–≥–∞–¥–∏!\n');
    console.log('üí° –≠—ä–ª–æ–Ω–ª–∞—Ä —Å–∞“õ–ª–∞–Ω–≥–∞–Ω. –ê–≥–∞—Ä –∫–µ—Ä–∞–∫ –±—û–ª—Å–∞, –∫–µ–π–∏–Ω—Ä–æ“õ —û—á–∏—Ä–∏—à –º—É–º–∫–∏–Ω.\n');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –•–∞—Ç–æ:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

deactivateDuplicateRoutes();
